/* Rexx by YCOS Yves Colliard Software - www.ycos.de                  */
/*                                                                    */
/*+------------------------------------------------------------------+*/
/*| YCLMACRX     (c)  YCOS Yves Colliard Software                    |*/
/*|                   2004-21                                        |*/
/*|                   Mail yves.colliard§ycos.de                     |*/
/*|                   Use at your own RISK|                          |*/
/*|                                                                  |*/
/*| Function YCLMACDS: Extract dataset name from line(s) of          |*/
/*|                   edited data set.                               |*/
/*|                   2013-06-11                                     |*/
/*| Author:           Juergen Eberle                                 |*/
/*| Email:            Juergen.Eberle§huk-coburg.de                   |*/
/*+------------------------------------------------------------------+*/
/*|                                                                  |*/
/*| This Rexx uses the Doug Nadel marvellous program|                |*/
/*| This LMAC program as to run, be customized and an initial        |*/
/*| macro as to be set                                               |*/
/*| download LMAC from IBM:                                          |*/
/*| http://www-01.ibm.com/support/docview.wss?uid=swg24014047        |*/
/*|                                                                  |*/
/*| Integrated within z/OS 1.13|                                     |*/
/*|                                                                  |*/
/*|                                                                  |*/
/*+------------------------------------------------------------------+*/
/*| Vers 2.23  21.12.2021 Yves Colliard                              |*/
/*|            Support long symbols. Thanks Hr. Thaler               |*/
/*|            Support INCLUDE and PROC in JCL                       |*/
/*| Vers 2.22  13.11.2019 Yves Colliard                              |*/
/*|            Support lower case DSNames - thanks to KHW            |*/
/*|            Check // in first 2 cols -> not a path| thanks Bruce  |*/
/*| VERS 2.21  06.05.2018 Yves Colliard                              |*/
/*|            Change of DSN chars based on a good idea from         |*/
/*|            Stefan Mitterer| Thanks                               |*/
/*| VERS 1.01  11.06.2013 Juergen Eberle                             |*/
/*|            Added code to resolve system symbols in DSN.          |*/
/*| VERS 1.00  11.06.2013 Juergen Eberle                             |*/
/*|            Move YCLMACDS to a separate member - external function. |*/
/*+------------------------------------------------------------------+*/
address "ISREDIT"

"(CURLINE CURCOL) = CURSOR"
"(START) = LINENUM .ZFRANGE"   /* Get 1st line number in the range    */
"(STOP)  = LINENUM .ZLRANGE"   /* Get last line number in the range   */
"(DW)    = DATA_WIDTH"         /* Get the width of the editable data  */
"(LEFT,RIGHT) = BOUNDS"        /* Get the BOUNDS                      */

/* yves */
sep='05'x       /* 2.9 */
RC = 0          /* 2.9 */
/* T        = Translate(Arg(1)) */
T = arg(1)
dsn   =""
volser=""
if curcol>0 then do
  if curcol=1 & left(T,2)="//" then nop                   /* V2.22    */
  else do
    call lmaccsrp T, curcol                               /* 2.12 HUK */
    dsn = result                                          /* 2.12 HUK */
  end
end
if dsn <> "" then do                                      /* 2.12 HUK */
   if pos("/",dsn) > 0 then do                            /* 2.12 HUK */
      dsn = strip(dsn,"B","'")                            /* 2.12 HUK */
      sep = sep"UNIXPATH"                                 /* 2.12 HUK */
   end                                                    /* 2.12 HUK */
end                                                       /* 2.12 HUK */
else do                                                   /* 2.12 HUK */
   if left(T,2)="//" then do
     parse Var T teil1 teil2 teil3 .
     if teil2="INCLUDE" | teil2="EXEC" then do            /* 2.23     */
       fnd="N"
       call try_incl
       if fnd="N" then do
         zedsmsg=''
         zedlmsg="Member" jclparm "not found on "Teil2" JCL statement."
         ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
         "CURSOR = "CURLINE CURCOL
         return 8
       end
       else            return 0 fnd
     end
     else do
       yanf = Start
       yend = Start
       if teil2 <> "DD" & pos("LIKE=",T)=0 then do
          yl=teil2
          /* search begin */
          trop="N"
          do j=start-1 to 1 by -1 until trop="Y"
             "(YLIN) = LINE "j     /* Get previous line                  */
             parse Var YLIN teil1 teil2 teil3 .
             if left(teil1,3)<>"//*" & teil2 ="DD" then do
                trop = "Y"
             end
          end
          if trop = "Y" then do
             yanf = J
         /*  say yanf "LINE" ylin */
          end
       end
       else do
          yl=teil3
       end
       if right(strip(yl),1)="," then do
          /* search End */
          "(TLINE) = LINENUM .ZLAST"
          do j=start+1 to TLINE until right(strip(yl),1)<>","
             "(YLIN) = LINE "j     /* Get previous line                  */
             parse Var YLIN teil1 yl .
             if left(teil1,3)="//*" then do
                yl=","
             end
          end
          yend = J
       /* say yend "LINE" ylin */
       end
       /* say "Anf" yanf "End" yend */

       /* search DSN & VOLSER  */
                         /* until (dsn<>"" & volser<>"") */
       do j=yanf to yend until (dsn<>"" & volser<>"")
         "(YLIN) = LINE "j     /* Get the line                       */
         if dsn="" then do
            Parse    Var ylin t1 "DSN=" DSN "," .
            if left(t1,3)<>"//*" | ,
               (left(t1,3)="//*" & yanf=yend) then do
               if Dsn = "" then Parse Var ylin . "DSNAME=" Dsn "," .
     /*
               if Dsn = "" & pos("JCLLIB",ylin)>0 then do
                 Parse Var ylin "JCLLIB" "ORDER="Dsn .
                 Parse Var dsn . "(" dsn ")" .
                 Parse Var dsn dsn "," .
               end
     */
               if Dsn = "" & pos("LIKE=",ylin)>0 & start=j then do
                 Parse Var ylin "LIKE="Dsn "," .
               end
            end
            else do
               dsn=""
           end
         end
         if volser="" then do
            Parse    Var ylin t1 "VOL=SER=" volser "," .
            if left(t1,3)="//*" then do
               volser=""
           end
         end
       end
       dsn=strip(dsn)
       dsn=strip(dsn,"B","'")
       /* 2.9 check for path */
       if dsn="" then do                                           /* 2.9 */
         do j=yanf to yend until (dsn<>"")                         /* 2.9 */
           "(YLIN) = LINE "j     /* Get the line           */      /* 2.9 */
           Parse    Var ylin "PATH='" DSN "'" .                    /* 2.9 */
         end                                                       /* 2.9 */
         dsn=strip(dsn)                                            /* 2.9 */
         if dsn<>"" then do                                        /* 2.9 */
           sep=sep"UNIXPATH"                                       /* 2.9 */
         end                                                       /* 2.9 */
       end                                                         /* 2.9 */
     end
   end
                                                      /* Eberle  120720 */
   /* next 34 lines moved                                Eberle  120720 */
                                                      /* Eberle  120720 */
   if Dsn = "" then do
     if left(T,3)="//*" then do
       select
       when pos("DSN=",T)>0 then do
         parse var T "DSN=" dsn "," .
         dsn=strip(dsn)
       end
       when pos("DSNAME=",T)>0 then do
         parse var T "DSNAME=" dsn "," .
         dsn=strip(dsn)
       end
       otherwise
         nop
       end
     end
     else do /* it is not a JCL */
                                                     /* Eberle  120720 */
     /* 34 lines moved to here                          Eberle  120720 */
                                                     /* Eberle  120720 */
        "(zz ss) = Cursor"                           /* Eberle  120720 */
        if ss = 0 then ss = 1                        /* Eberle  120720 */
        if POS(".",T,ss) > 0 then do                 /* Eberle  120720 */
           wo = POS(".",T,ss)                        /* Eberle  120720 */
                                                     /* Eberle  120720 */
           if wo>1 & wo<dw-1 then do
             dsnc="abcdefghijklmnopqrstuvwxyz"||,
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789#§$-.&*%"  /* 2.22 HW */
             fnda="NO"
             do i=wo-1 to 1 by -1 until fnda<>"NO"
                if pos(substr(T,i,1),dsnc)=0 then
                   fnda=I
             end
             fnde="NO"
             do i=wo+1 to dw until fnde<>"NO"
                if pos(substr(T,i,1),dsnc)=0 then
                   fnde=I
             end
             if substr(T,fnde,1)="(" then do
               fndm="NO"
               do i=fnde+1 to dw until fndm<>"NO"
                  if pos(substr(T,i,1),dsnc)=0 then
                     fndm=I
               end
               if fndm <> "NO" & substr(T,fndm,1)=")" then do
                  fnde = fndm + 1
               end
             end
             if fnda="NO" then
                fnda=0
             if fnde="NO" then
                dsn=""
             else
               dsn = substr(T,fnda+1,fnde-fnda-1)
           end
        end
     end
   end
end                                                               /* 2.12 HUK */
if       Dsn = "" then do
         ZedSMsg = yclmaclm(4)
         ZedLMsg = yclmaclm(5)
         "cursor = .ZFRANGE 0"                                    /* 2.12 HUK */
         Address ISPEXEC 'SETMSG MSG(ISRZ001)'
         Return 8 Dsn""sep""volser
end

Parse    Var Dsn Dsn .

/* try to solve &dsn using system symbols and // JCL SET - 2.13 */
ii = 1
ii=Pos("&",Dsn)
do while ii > 0
   iimin1=ii-1
   if iimin1>0 then do
     Parse Var Dsn  Dsn1 +(iimin1) +1 Dsn2 .
   end
   else do
     Dsn1=""
     Parse Var Dsn  +1 Dsn2 .
   end
   if Dsn2 <> "" then do
      parse var Dsn2 Dsn2 "." Dsn3
      kdsn2=dsn2
      if length(Dsn2)<17 then do             /* 2.23 Hr. Thaler */
        if dsn2="SYSUID" then dsn2=userid()  /* 2.14 */
        else dsn2 = mvsvar("SYMDEF",Dsn2)
        if dsn2<>"" then kdsn2=dsn2
      end
      else do
        dsn2=""
      end
      redo="N"
      if dsn2="" & start > 1 & left(T,2)="//" then do
        do j=start-1 to 1 by -1
          "(xstat) = XSTATUS "j
          if xstat = "NX" then do
            "(YLIN) = LINE "j
            select
            when left(ylin,3)="//*" then nop /* no comment */
            when left(ylin,2)<>"//" then nop /* no jcl     */
            otherwise
              parse var ylin . jc2 jc3 .
              if jc2="SET" then do
                parse var jc3 jc3 "=" jc4 .
                if strip(jc3)=kdsn2 & jc4<>"" then do
                  dsn2=strip(jc4,"B","'")
                  if pos("&",jc4)>0 then do
                    redo="Y"
                    dsn2=dsn2"."
                  end
                  kdsn2=dsn2
                  j=0
                end
              end
            end
          end
        end
      end
      if dsn2<>kdsn2 & redo="N" then dsn2="&"kdsn2
      dsn = Dsn1||Dsn2||Dsn3
      if redo="N" then do
        ii=ii+length(dsn2)
        ii=Pos("&",Dsn,ii)
      end
      else do
        ii=Pos("&",Dsn,ii)
      end
   end
end

Parse    var Dsn  DsnN "(" DsnM ")" .
if       Pos("&",DsnM) > 0 then Dsn = DsnN

if length(strip(volser))<>6 then do
   volser=""
end

Return RC Dsn""sep""volser

/* Evaluate DSN or Path around current cursor position                        */

lmaccsrp:
parse arg line, curcol

Address  ISPEXEC "CONTROL ERRORS RETURN"       /* Return ispf errors  */

parse var line p1 =(curcol) p2
parse value reverse(p1) with t1 "," ,
                           1 t2 "=" ,
                           1 t3 "," ,
                           1 t4 " "
ml=min(length(t1),length(t2),length(t3),length(t4))
parse value         p2  with t1 "," ,
                           1 t2 "=" ,
                           1 t3 "," ,
                           1 t4 " "
mx=min(length(t1),length(t2),length(t3),length(t4))

dsn=substr(line,curcol-ml,ml+mx)
dsn = strip(dsn,"B")

return dsn

/* try to find dsn on JCL INCLUDE and PROC */        /* 2.23 */
try_incl:
/* most identical Y$JI                                             */
jclstmt=strip(teil2)
jclparm=strip(teil3)

select
when jclstmt="INCLUDE" then do
  if left(jclparm,7)<>"MEMBER=" then do
    zedsmsg=''
    zedlmsg="Selected line JCL INCLUDE syntax error - MEMBER= expected."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
    "CURSOR = "CURLINE CURCOL
    return 8
  end
  jclparm=substr(jclparm,8)
  if length(jclparm)>8 then do
    zedsmsg=''
    zedlmsg="Selected line JCL INCLUDE syntax error -",
      "Member name length greater 8 - "length(jclparm)
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
    "CURSOR = "CURLINE CURCOL
    return 8
  end
  call do_incl
end
when jclstmt="EXEC" then do
  if left(jclparm,4)="PGM=" then do
    zedsmsg=''
    zedlmsg="Selected line JCL is an EXEC PGM= not PROC"
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
    "CURSOR = "CURLINE CURCOL
    return 8
  end
  if left(jclparm,5)="PROC=" then do
    jclparm=substr(jclparm,6)
  end
  parse var jclparm jclparm ","
  if length(jclparm)>8 then do
    zedsmsg=''
    zedlmsg="Selected line JCL PROC syntax error -",
      "Procedure name length greater 8 - "length(jclparm)
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
    "CURSOR = "CURLINE CURCOL
    return 8
  end
  call do_incl
end
otherwise
  zedsmsg=''
  zedlmsg="Selected line must be an INCLUDE or EXEC PROC statement."
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
  "CURSOR = "CURLINE CURCOL
  return 8
end
"CURSOR = "CURLINE CURCOL
return 0
/* */
do_incl:
/* JCL INCLUDE statement */

/* find possible JCLLIB */
call find_jcllib
if fnd<>"N" then do
  return
end
else do
  call find_proclib
  return
end

find_jcllib:
/* find possible JCLLIB */
dsc=0
do j=curline-1 to 1 by -1
  "(xstat) = XSTATUS "j
  if xstat = "NX" then do
    "(YLIN) = LINE "j
    select
    when left(ylin,3)="//*" then nop /* no comment */
    when left(ylin,2)<>"//" then nop /* no jcl     */
    otherwise
      parse var ylin . jc2 jc3 .
      if jc2="JCLLIB" then do
        parse var jc3 "ORDER=" jc4 .
        dsc=j
        leave j
      end
    end
  end
end
/* possible:                                                   */
/* jcllib order=a.b.c                                          */
/* jcllib order=(a.b.c,d.e.f)                                  */
/* jcllib order=(a.b.c,                                        */
/*        d.e.f)                                               */
/* jcllib order=(a.b.c,                                        */
/* * comment                                                   */
/*        d.e.f)                                               */
if dsc<>0 then do
  jc4=strip(jc4)
  select
  when left(jc4,1)<>"(" then do
    lin=jc4
  end
  when left(jc4,1)="(" & right(jc4,1)=")" then do
    parse var jc4 "(" lin ")"
  end
  otherwise
  /* Comment Start
  trace ?i
     Comment End */
    lin=substr(jc4,2)
    do j=dsc+1 to curline-1 until right(jc4,1)=")"
      "(xstat) = XSTATUS "j
      if xstat = "NX" then do
        "(YLIN) = LINE "j
        if left(ylin,3)="//*" then nop /* no comment */
        else do
          parse var ylin . jc4
          jc4=strip(jc4)
          lin=lin""jc4
        end
      end
    end
    parse var lin lin ")"
  end
  do dsc=1 until lin=""
    parse var lin dsi.dsc "," lin
    dsi.dsc=strip(dsi.dsc,"B","'")
    if sysdsn("'"dsi.dsc"("jclparm")'")="OK" then do
      fnd=dsi.dsc"("jclparm")"
    end
  end
end
/* Comment Start
say lin
do l2 = 1 to dsc
  say dsi.l2 "-" l2
end
   Comment End */
return

find_proclib:
/* find possible PROCLIB */

address tso,
"NEWSTACK"
signal on error name the_error
address tso,
"Y$PROCJ"       /* call setup pgm        */
if rc<>0 then do
  zedsmsg=""
  zedlmsg="Problem calling Y$PROCJ - please review customization"
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
  exit
end
signal off error
prc=0
do queued()          /* for all data in queue */
  prc=prc+1
  parse pull ycset   /* get the info          */
  interpret "proc."prc "=" ycset    /* get the dataset name  */
end
address tso,
"DELSTACK"
/* */
do l1=1 to prc
  if sysdsn("'"proc.l1"("jclparm")'")="OK" then do
    fnd=proc.l1"("jclparm")"
    prc=l1
    leave l1
  end
end

if fnd="N" then return

/* Comment Start
say fnd
   Comment End */

return

/* */
the_error:
  zedsmsg=""
  zedlmsg="Problem calling Y$PROCJ - please review customization"
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
  exit
